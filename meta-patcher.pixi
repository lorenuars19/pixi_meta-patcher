fn print_array($array) {
    logf( "$array %d\n", $array )
    array = clone($array)
    array_siz = get_size(array)
    logf("mod_array_id=%d,size=%d\n", array, array_siz)
    for ( arr_idx = 0; arr_idx <= array_siz; arr_idx + 1 ) {
        logf("[%d]=%d ", arr_idx, array[arr_idx])
    }
    logf("\n")
    remove(array)
}

fn force_ctl_event() {
    buf = new( 32*2, 1, FLOAT32 )
    sv_render( sv, buf, 2 )
    remove( buf )
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

MOD_WIDTH = 128
MOD_HEIGHT = MOD_WIDTH * 1
N_MODULES_X = 4
N_MODULES_Y = 16

STR_SIZ_MAX = 256
mod_typ_array = new( N_MODULES_X, STR_SIZ_MAX, char )
mod_typ_array[0] = "Amplifier"
mod_typ_array[1] = "Filter"
mod_typ_array[2] = "Compressor"
mod_typ_array[3] = "Amplifier"

MAX_FREQ = 14000
BP_FREQ_BASE = pow( N_MODULES_Y, 1.0 / N_MODULES_Y );
MAX_Q = 1530


///////////////////////////////////////////////////////////////////////////////
sv = sv_new(44100, SV_INIT_FLAG_OFFLINE)
sv_set_event_t( sv, 1, 0 )

version_major = ( SV_VERSION >> 24 ) & 255;
version_minor1 = ( SV_VERSION >> 16 ) & 255;
version_minor2 = ( SV_VERSION >> 8 ) & 255;
version_minor3 = SV_VERSION & 255;
logf( "SunVox version: %d.%d.%d.%d\n", version_major, version_minor1, version_minor2, version_minor3 )


sv_lock( sv )

output_mod_pos = sv_get_module_xy(sv, 0)
logf ("output_mod_pos=%016X\n", output_mod_pos)
output_mod_xy = new(2)
output_mod_xy[0] = output_mod_pos & 0xFFFF
output_mod_xy[1] = ( output_mod_pos >> 16 ) & 0xFFFF

logf( "initial_position,x=%d,y=%d,raw=%016X\n", output_mod_xy[0], output_mod_xy[1], output_mod_pos)

init_module_x = output_mod_xy[0] - (MOD_WIDTH * (N_MODULES_X + 1))
init_module_y = output_mod_xy[1] - (MOD_HEIGHT * (N_MODULES_Y)) / 2 + (MOD_HEIGHT / 2)
middle_module_y = init_module_y + (MOD_HEIGHT * (N_MODULES_Y)) / 2 - (MOD_HEIGHT / 2)

remove( output_mod_xy )

mod_array_id = new( N_MODULES_X, N_MODULES_Y, INT )
clean( mod_array_id )
logf( "mod_array_id=%d,size=%d\n", mod_array_id, get_size(mod_array_id) )

in_mod_id = sv_new_module( sv, "Amplifier", "in", init_module_x - MOD_WIDTH, middle_module_y, 0 )
out_mod_id = sv_new_module( sv, "Amplifier", "out", init_module_x + (MOD_WIDTH * N_MODULES_X + 1), middle_module_y, 0 )
sv_connect_module( sv, out_mod_id, 0 )

for ( i = 0; i < N_MODULES_X; i + 1 ) {
    for ( j = 0; j < N_MODULES_Y; j + 1 ) {
        mod_name = ""
        module_type = mod_typ_array[i]
        freq_step = (MAX_FREQ / N_MODULES_Y)
        freq_mult = pow( BP_FREQ_BASE, j ) - 1
        bp_freq = 60 + (freq_step * freq_mult)
        logf( "bp_freq=%f,BP_FREQ_BASE=%f,freq_step=%f,freq_mult=%f ", bp_freq, BP_FREQ_BASE, freq_step, freq_mult )

        sprintf( mod_name, "%s_i%d_j%d", module_type, i, j )
        if (strcmp(module_type, "Filter") == 0) {
            sprintf( mod_name, "BP %d Hz", bp_freq)
            
        }
        new_module_x = init_module_x + (MOD_WIDTH * i)
        new_module_y = init_module_y + (MOD_HEIGHT * j)
        new_module_id = sv_new_module(sv, module_type, mod_name, new_module_x, new_module_y, 0)
        mod_array_id[i,j] = new_module_id
        // logf( "mod_name=%s ", mod_name )
        // logf( "new_module:x=%04d,y=%04d ", new_module_x, new_module_y )
        // logf( "new_module_id=%04d ", new_module_id )
        // logf( "mod_array_id[i=%04d][j=%04d]=%04d\n", i, j, mod_array_id[i,j] )


        // SET CTLS 
        if (strcmp(module_type, "Filter") == 0) {
            logf( "set filter ctl on module_id=%#0X bp_freq=0x%x %d", new_module_id, bp_freq, bp_freq)
            sv_set_module_ctl_value(sv, new_module_id, 1, bp_freq, 0) // set freq
            sv_set_module_ctl_value(sv, new_module_id, 2, MAX_Q / 2, 0) // set Q to middle
            sv_set_module_ctl_value(sv, new_module_id, 3, 2, 0) // set mode to BP

            sv_set_module_ctl_value(sv, new_module_id, 12, 3, 0) // set roll off to max

            sv_set_module_ctl_value(sv, new_module_id, 8, 0, 0) // set LFO freq

        }
        logf( "\n" )
        // graphics
        scl_x = 1.8
        scl_y = 0.1
        scld_mod_width = MOD_WIDTH * scl_x
        scld_mod_height = MOD_HEIGHT * scl_y
        graphic_x = (scld_mod_width * i) - (scld_mod_width * (N_MODULES_X / 2))
        graphic_y = (scld_mod_height * j) - (scld_mod_height * (N_MODULES_Y / 2))
        box( graphic_x, graphic_y, (scld_mod_width / 2), (scld_mod_height / 2), sv_get_module_color(sv, new_module_id) )
        text = ""
        sprintf( text, "%s_%s", mod_name, module_type )
        print(  text, graphic_x, graphic_y + (scld_mod_height / 4), WHITE, CENTER | LEFT )

        frame()
        
        prev_i = i - 1
        if (prev_i >= 0 && prev_i <= N_MODULES_X)
        {   
            conn_mod_id_to = new_module_id
            conn_mod_id_from = mod_array_id[prev_i,j]
            // logf( "mod_array_id[prev_i=%04d][j=%04d]=%04d ", prev_i, j, mod_array_id[prev_i,j] )
            if (conn_mod_id_from <= 0){continue}
            // logf( "connect:conn_mod_id_from=%04d,conn_mod_id_to=%04d\n", conn_mod_id_from, conn_mod_id_to)
            if (conn_mod_id_from == conn_mod_id_to) {
                // logf( "WARNING:avoiding self-connection\n")
                continue
            }
            sv_connect_module(sv, conn_mod_id_from, conn_mod_id_to)
        }
    }
    force_ctl_event()
}

for (j = 0; j < N_MODULES_Y; j + 1 ) {

    module_id = mod_array_id[N_MODULES_X - 1, j]
    // logf( "connect to output module module_id=%d\n", module_id)
    sv_connect_module(sv, module_id, out_mod_id)
}

for (j = 0; j < N_MODULES_Y; j + 1 ) {
    module_id = mod_array_id[0, j]
    // logf( "connect input module to module_id=%d\n", module_id)
    sv_connect_module( sv, in_mod_id, module_id )
}

gen_mod_id = sv_new_module( sv, "Analog generator", "gen", init_module_x - MOD_WIDTH * 2, init_module_y + (MOD_HEIGHT * (N_MODULES_Y)) / 2 - (MOD_HEIGHT / 2), 0 )
sv_connect_module( sv, gen_mod_id, in_mod_id )



remove( mod_name )
remove( mod_array_id )



sv_save( sv, "test.sunvox" )

sv_unlock( sv )

sv_remove( sv )


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// set_pixel_size( WINDOW_XSIZE / 480 )
// resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

// screen = get_screen()
// xsize = get_xsize( screen )
// ysize = get_ysize( screen )

// t = 0

// while( 1 )
// {
//     while get_event() { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }
// }